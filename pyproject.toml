[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "temporal-practice"
version = "1.0.0"
description = "Temporal workflow practice project with FastAPI and Hydra"
authors = [{ name = "Your Name", email = "your.email@example.com" }]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "alembic>=1.16.5",
    "fastapi>=0.117.1",
    "httpx>=0.28.1",
    "hydra-core>=1.3.2",
    "loguru>=0.7.3",
    "omegaconf>=2.3.0",
    "passlib[bcrypt]>=1.7.4",
    "pydantic>=2.11.9",
    "python-jose[cryptography]>=3.5.0",
    "python-multipart>=0.0.20",
    "redis>=6.4.0",
    "rich>=14.1.0",
    "slowapi>=0.1.9",
    "sqlalchemy>=2.0.43",
    "temporalio>=1.18.0",
    "uvicorn[standard]>=0.36.0",
]

[project.optional-dependencies]
dev = []

[project.urls]
Homepage = "https://github.com/yourusername/temporal-practice"
Repository = "https://github.com/yourusername/temporal-practice"
Documentation = "https://github.com/yourusername/temporal-practice#readme"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*", "*/conftest.py", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "black>=25.9.0",
    "faker>=37.8.0",
    "flake8>=7.3.0",
    "isort>=6.0.1",
    "mypy>=1.18.2",
    "pre-commit>=4.3.0",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "pytest-mock>=3.15.1",
]
